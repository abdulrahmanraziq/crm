{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91984\\\\Documents\\\\CRM\\\\client\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Sidebar } from './Sidebar';\nimport { MainContent } from './MainContent';\nimport CustomerForm from './CustomerForm'; // Form for both create and edit\nimport Customers from './Customers'; // Import the CustomerList component\nimport { createCustomer, updateCustomer } from '../services/customerService';\nimport './Dashboard.css'; // Keep CSS for layout styling\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [isEditing, setIsEditing] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState(null);\n  const [customers, setCustomers] = useState([]); // State to hold the customer list\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch customers on component mount\n  useEffect(() => {\n    const fetchCustomers = async () => {\n      try {\n        const response = await axios.get('http://localhost:10000/api/customers');\n        setCustomers(response.data);\n      } catch (error) {\n        setError('Error fetching customers');\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCustomers();\n  }, []);\n\n  // Handler for creating a new customer\n  const handleCreateCustomer = async customerData => {\n    const result = await createCustomer(customerData);\n    console.log('Customer created:', result);\n    setCustomers([...customers, result]); // Update the customer list\n  };\n\n  // Handler for editing an existing customer\n  const handleEditCustomer = async customerData => {\n    const result = await updateCustomer(editingCustomer._id, customerData);\n    console.log('Customer updated:', result);\n    setCustomers(customers.map(customer => customer._id === result._id ? result : customer)); // Update the customer list\n    setIsEditing(false); // Return to create mode after editing\n  };\n\n  // Trigger the editing mode and set the selected customer for editing\n  const startEdit = customer => {\n    setEditingCustomer(customer);\n    setIsEditing(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [isEditing ? /*#__PURE__*/_jsxDEV(CustomerForm, {\n        onSubmit: handleEditCustomer,\n        initialValues: editingCustomer,\n        isEditing: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(CustomerForm, {\n        onSubmit: handleCreateCustomer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading customers...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Customers, {\n        customers: customers,\n        startEdit: startEdit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MainContent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"3Hdfeq/9lyy23m9NaDd4uHskVAM=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Sidebar","MainContent","CustomerForm","Customers","createCustomer","updateCustomer","axios","jsxDEV","_jsxDEV","Dashboard","_s","isEditing","setIsEditing","editingCustomer","setEditingCustomer","customers","setCustomers","loading","setLoading","error","setError","fetchCustomers","response","get","data","console","handleCreateCustomer","customerData","result","log","handleEditCustomer","_id","map","customer","startEdit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","initialValues","_c","$RefreshReg$"],"sources":["C:/Users/91984/Documents/CRM/client/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Sidebar } from './Sidebar';\r\nimport { MainContent } from './MainContent';\r\nimport CustomerForm from './CustomerForm'; // Form for both create and edit\r\nimport Customers from './Customers'; // Import the CustomerList component\r\nimport { createCustomer, updateCustomer } from '../services/customerService';\r\nimport './Dashboard.css'; // Keep CSS for layout styling\r\nimport axios from 'axios';\r\n\r\nconst Dashboard = () => {\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editingCustomer, setEditingCustomer] = useState(null);\r\n  const [customers, setCustomers] = useState([]); // State to hold the customer list\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch customers on component mount\r\n  useEffect(() => {\r\n    const fetchCustomers = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:10000/api/customers');\r\n        setCustomers(response.data);\r\n      } catch (error) {\r\n        setError('Error fetching customers');\r\n        console.error(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCustomers();\r\n  }, []);\r\n\r\n  // Handler for creating a new customer\r\n  const handleCreateCustomer = async (customerData) => {\r\n    const result = await createCustomer(customerData);\r\n    console.log('Customer created:', result);\r\n    setCustomers([...customers, result]); // Update the customer list\r\n  };\r\n\r\n  // Handler for editing an existing customer\r\n  const handleEditCustomer = async (customerData) => {\r\n    const result = await updateCustomer(editingCustomer._id, customerData);\r\n    console.log('Customer updated:', result);\r\n    setCustomers(customers.map(customer => (customer._id === result._id ? result : customer))); // Update the customer list\r\n    setIsEditing(false); // Return to create mode after editing\r\n  };\r\n\r\n  // Trigger the editing mode and set the selected customer for editing\r\n  const startEdit = (customer) => {\r\n    setEditingCustomer(customer);\r\n    setIsEditing(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <Sidebar /> {/* Sidebar remains unchanged */}\r\n\r\n      <div className=\"main-content\">\r\n        {/* Display the Customer Form for both create and edit */}\r\n        {isEditing ? (\r\n          <CustomerForm\r\n            onSubmit={handleEditCustomer}\r\n            initialValues={editingCustomer}\r\n            isEditing\r\n          />\r\n        ) : (\r\n          <CustomerForm onSubmit={handleCreateCustomer} />\r\n        )}\r\n\r\n        {/* Customer List */}\r\n        {loading ? (\r\n          <div>Loading customers...</div>\r\n        ) : error ? (\r\n          <div>{error}</div>\r\n        ) : (\r\n          <Customers customers={customers} startEdit={startEdit} />\r\n        )}\r\n        \r\n        {/* Other dashboard content like reports or customer list */}\r\n        <MainContent />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}