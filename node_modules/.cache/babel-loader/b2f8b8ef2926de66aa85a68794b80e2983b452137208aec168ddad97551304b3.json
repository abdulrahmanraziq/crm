{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91984\\\\Documents\\\\CRM\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport 'react-toastify/dist/ReactToastify.css';\n\n// Create AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\n\n// Create AuthContextProvider component\nexport const AuthContextProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n\n  // Login request function\n  const loginUser = async userData => {\n    try {\n      const res = await fetch(\"https://crm-mern-back-end.onrender.com/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(userData)\n      });\n\n      // Check if response is successful\n      if (!res.ok) {\n        const errorData = await res.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n      const data = await res.json();\n      if (data.token) {\n        localStorage.setItem(\"token\", data.token);\n        setUser(data.user);\n        console.log(\"User logged in:\", data.user);\n        return data.user;\n      }\n    } catch (error) {\n      console.log(\"Error during login:\", error.message);\n      throw error;\n    }\n  };\n\n  // Register request function\n  const registerUser = async userData => {\n    try {\n      const res = await fetch(\"https://crm-mern-back-end.onrender.com/api/register\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(userData)\n      });\n      const result = await res.json();\n      if (res.ok) {\n        // Notify user of success\n        toast.success('Registration successful!');\n        return result; // Return the result if needed\n      } else {\n        throw new Error(result.message || 'Registration failed');\n      }\n    } catch (error) {\n      console.log(\"Error during registration:\", error.message);\n      toast.error(error.message); // Show error message\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loginUser,\n      registerUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = AuthContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useState","toast","jsxDEV","_jsxDEV","AuthContext","AuthContextProvider","children","_s","user","setUser","loginUser","userData","res","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","data","token","localStorage","setItem","console","log","error","registerUser","result","success","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/91984/Documents/CRM/client/src/context/AuthContext.js"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n// Create AuthContext\r\nexport const AuthContext = createContext();\r\n\r\n// Create AuthContextProvider component\r\nexport const AuthContextProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  // Login request function\r\n  const loginUser = async (userData) => {\r\n    try {\r\n      const res = await fetch(\"https://crm-mern-back-end.onrender.com/api/login\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      // Check if response is successful\r\n      if (!res.ok) {\r\n        const errorData = await res.json();\r\n        throw new Error(errorData.message || 'Login failed');\r\n      }\r\n\r\n      const data = await res.json();\r\n\r\n      if (data.token) {\r\n        localStorage.setItem(\"token\", data.token);\r\n        setUser(data.user);\r\n        console.log(\"User logged in:\", data.user);\r\n        return data.user;\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error during login:\", error.message);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Register request function\r\n  const registerUser = async (userData) => {\r\n    try {\r\n      const res = await fetch(\"https://crm-mern-back-end.onrender.com/api/register\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      const result = await res.json();\r\n\r\n      if (res.ok) {\r\n        // Notify user of success\r\n        toast.success('Registration successful!');\r\n        return result; // Return the result if needed\r\n      } else {\r\n        throw new Error(result.message || 'Registration failed');\r\n      }\r\n    } catch (error) {\r\n      console.log(\"Error during registration:\", error.message);\r\n      toast.error(error.message); // Show error message\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loginUser, registerUser }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}